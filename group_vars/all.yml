---
# Specify users which will be able to access docker without root privileges
docker_users:
  - "{{ ansible_user }}"

# Restart policy for Docker containers
docker_restart_policy: "always"

project_name: "hl-demo"

fabric_starter_workdir: "/home/{{ ansible_user }}/{{ project_name }}"
docker_artifacts: "{{ fabric_starter_workdir }}/dockercompose"
fabric_artifacts: "{{ fabric_starter_workdir }}/artifacts"

# Use couchdb in peers instead of leveldb
#use_couchdb: 'yes'
use_couchdb: 'no'
couchdb_port: 5984

# Hyperledger framework version
fabric_version: "1.4.2"
fabric_pack: "amd64-{{ fabric_version }}"
# fabric_thirdparty_version needed for couchdb, kafka etc..
fabric_thirdparty_version: "0.4.14"
fabric_rest_version: "latest"
node_version: "8-alpine"

# Hyperledger explorer configs
hl_explorer_version: 0.3.9.4
hl_explorer_port: 8080
hl_explorer_username: "admin"
hl_explorer_password: "adminpw"

# Default HL fabric ports

zookeper_ports:
  - '2181'
  - '2888'
  - '3888'
kafka_broker_port: 9092

orderer_port: 7050

api_port: 4000
ca_port: 7054
peer0_port: 7051
event0_port: 7053
peer1_port: 7056
event1_port: 7058
common_channel_name: "common"

#Chaincode configs
chaincode: "{{ fabric_starter_workdir }}/chaincode"
chaincode_lang: "golang"
chaincode_version: "1.0"
chaincode_common_name: "reference"
chaincode_bilateral_name: "relationship"
chanicode_common_init: '{"Args":["init","a","100","b","100"]}'
chanicode_bilateral_init: '{"Args":["init","a","100","b","100"]}'

# Define endorsement policy only in case there is a need
chaincode_endorcement_policy_common: ""
chaincode_endorcement_policy_bilateral: ""
#chaincode_endorcement_policy_common: "OR({% for fabric_host in groups['nodes'] %}{% if ('peer' in hostvars[fabric_host].node_roles) %}{% raw %}'{% endraw %}{{ hostvars[fabric_host].org }}{% raw %}MSP.member'{% endraw %}{% if not loop.last %},{% endif %}{% endif %}{% endfor %})"
#chaincode_endorcement_policy_bilateral: "OR({% for fabric_host in groups['nodes'] %}{% if 'root_peer' in hostvars[fabric_host].node_roles %}{% raw %}'{% endraw %}{{ hostvars[fabric_host].org }}{% raw %}MSP.member'{% endraw %}{% endif %}{% endfor %})"

# Define private collections configuration
collections_config_param: ""
collections_config_name: ""
collections_config_path: ""

#collections_config_param: "--collections_config"
#collections_config_name: "collections_config.json"
#collections_config_path: "{{ chaincode }}/{{ chaincode_lang }}/{{ chaincode_common_name }}/{{ collections_config_name }}"

# Folders to create for configs
fabric_artifacts_folders:
  - "{{ fabric_starter_workdir }}"
  - "{{ docker_artifacts }}"
  - "{{ fabric_artifacts }}"
  - "{{ fabric_artifacts }}/channel"
  - "{{ chaincode }}"
  - "{{ fabric_starter_workdir }}/www-client"

# Configuration files to transfer list
# - source
#   destination

fabric_templates:
  - from: "docker-compose-templates/base.yaml"
    to: "{{ docker_artifacts }}/base.yaml"
  - from: "artifact-templates/configtxtemplate.yaml"
    to: "{{ fabric_artifacts }}/configtx.yaml"
  - from: "artifact-templates/network-config-template.json"
    to: "{{ fabric_artifacts }}/network-config.json"

peer_templates:
  - from: "artifact-templates/fabric-ca-server-configtemplate.yaml"
    to: "{{ fabric_artifacts }}/fabric-ca-server-{{ org }}.yaml"
  - from: "docker-compose-templates/docker-composetemplate-peer.yaml"
    to: "{{ docker_artifacts }}/docker-compose-{{ org }}.yaml"
  - from: "artifact-templates/cryptogentemplate-peer.yaml"
    to: "{{ fabric_artifacts }}/cryptogen-{{ org }}.yaml"

orderer_templates:
  - from: "docker-compose-templates/docker-composetemplate-orderer.yaml"
    to: "{{ docker_artifacts }}/docker-compose-{{ domain }}.yaml"
  - from: "artifact-templates/cryptogentemplate-orderer.yaml"
    to: "{{ fabric_artifacts }}/cryptogen-{{ domain }}.yaml"

files_to_rsync_orderer:
  - from: "{{ org }}Config.json"
    to: ""
  - from: "crypto-config/peerOrganizations/{{ org }}.{{ domain }}/msp"
    to: "crypto-config/peerOrganizations/{{ org }}.{{ domain }}"
  - from: "crypto-config/peerOrganizations/{{ org }}.{{ domain }}/peers/peer0.{{ org }}.{{ domain }}/tls/ca.crt"
    to: "crypto-config/peerOrganizations/{{ org }}.{{ domain }}/peers/peer0.{{ org }}.{{ domain }}/tls"
  - from: "crypto-config/peerOrganizations/{{ org }}.{{ domain }}/peers/peer0.{{ org }}.{{ domain }}/msp/tlscacerts/tlsca.{{ org }}.{{ domain }}-cert.pem"
    to: "crypto-config/peerOrganizations/{{ org }}.{{ domain }}/peers/peer0.{{ org }}.{{ domain }}/msp/tlscacerts"
#  - from: "crypto-config/peerOrganizations/{{ org }}.{{ domain }}/peers/peer1.{{ org }}.{{ domain }}/tls/ca.crt"
#    to: "crypto-config/peerOrganizations/{{ org }}.{{ domain }}/peers/peer1.{{ org }}.{{ domain }}/tls"

files_to_rsync_nodes_phase1:
  - from: "crypto-config/ordererOrganizations/{{ domain }}/orderers"
    to: "crypto-config/ordererOrganizations/{{ domain }}/"
  - from: "channel"
    to: ""
files_to_rsync_nodes_phase2:
  - from: "*.block"
    to: ""

files_hl_explorer:
  - from: "artifact-templates/explorer-config.json"
    to: "{{ fabric_artifacts }}/explorer-config.json"
  - from: "docker-compose-templates/docker-composetemplate-explorer.yaml"
    to: "{{ docker_artifacts }}/docker-compose-explorer.yaml"